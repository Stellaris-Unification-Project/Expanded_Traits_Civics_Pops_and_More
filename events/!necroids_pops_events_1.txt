############################
#
# Necroids Events
#
# Written by Pierre du Plessis
#
############################

namespace = necroids

# Consumption event for necrophage
planet_event = {
	id = necroids.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			has_building = building_necrophage_elevation_chamber
			has_building = building_necrophage_house_of_apotheosis
		}
		exists = owner
		owner = {
			has_origin = origin_necrophage
			has_trait = trait_necrophage
		}
		num_assigned_jobs = {
			job = necro_apprentice
			value >= 1
		}
	}

	immediate = {
		set_timed_planet_flag = {
			flag = necrophage_alert_timer
			days = 2880
		}
		set_saved_date = {
			key = necrophage_elevation_timer
			days_from_present = 3600
			expires = 3600
		}
		random_owned_pop = {
			limit = {
				is_same_species = owner_species
				has_trait = trait_necrophage
			}
			species = { save_event_target_as = necrophage_pop_species }
		}
		every_owned_pop = {
			limit = { has_job = necro_apprentice }
			root.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
			root = {
				change_variable = {
					which = var_necrophaged_pops
					value = 1
				}
				if = {
					limit = {
						exists = event_target:necrophage_pop_species
					}
					create_pop = {
						species = event_target:necrophage_pop_species
					}
				}
				else = {
					create_pop = {
						species = owner_species
					}
				}
				if = {
					limit = {
						last_created_pop = {
							NOT = { ideal_planet_class = root }
						}
						NOR = {
							uses_district_set = habitat
							uses_district_set = ring_world
							uses_district_set = city_world
							uses_district_set = hive_world
							uses_district_set = machine_world
							is_planet_class = pc_gaia
							is_planet_class = pc_relic
						}
						owner = {
							has_technology = tech_glandular_acclimation
							NOT = { ideal_planet_class = root }
						}
					}
					last_created_pop = {
						modify_species = {
							ideal_planet_class = root
						}
					}
				}
			}
			every_country = {
				limit = {
					has_communications = root.owner
					NOR = {
						is_same_empire = root.owner
						is_same_species = prev
						has_ai_personality_behaviour = purger
						has_valid_civic = civic_infestation
						has_origin = origin_necrophage
						has_ethic = ethic_gestalt_consciousness
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
					OR = {
						is_country_type = default
						is_country_type = ascended_empire
						is_country_type = lost_empire
						has_ai_personality = awakened_fallen_empire_xenophile
					}
					has_intel_level = {
						who = FROM
						category = economy
						level >= 2
					}
				}
				add_opinion_modifier = { who = root.owner modifier = opinion_necrophage }
			}
			every_country = {
				limit = {
					has_communications = root.owner
					NOT = { is_same_empire = root.owner }
					is_same_species = prev
					has_intel_level = {
						who = FROM
						category = economy
						level >= 1 #lower because you'd hear from a friend of a friend
					}
				}
				add_opinion_modifier = { who = root.owner modifier = opinion_necrophage_our_species }
			}
			kill_pop = yes
		}
		create_message = {
			type = MESSAGE_NECROPHAGE_POPS_NECROPHAGED
			localization = MESSAGE_NECROPHAGE_POPS_NECROPHAGED
			days = 30
			target = this
			variable = {
				type = name
				localization = PLANET
				scope = this
			}
			variable = {
				type = variable
				varname = var_necrophaged_pops
				localization = VALUE
				scope = this
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						has_active_tradition = tr_harmony_unity_of_self
						has_active_tradition = tr_synchronicity_unity_of_mind
					}
				}
			}
			owner = {
				add_monthly_resource_mult = {
					resource = unity
					value = 1.5
					min = 5
					max = 100
				}
			}
		}
		set_variable = {
			which = var_necrophaged_pops
			value = 0
		}
	}
}

# Make starting colonisables be Primitives
country_event = {
	id = necroids.4
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			has_valid_civic = civic_living_hosts
			has_origin = origin_necrophage
		}
	}

	immediate = {
		if = {
			limit = {
				is_ai = yes
				has_country_flag = necrophage_start_empire
				has_ethic = ethic_fanatic_xenophobe
				has_ethic = ethic_militarist
			}
			force_remove_civic = civic_cutthroat_politics
			force_add_civic = civic_fanatic_purifiers
		}
		capital_scope.solar_system = {
			closest_system = {
				limit = { has_star_flag = neighbor_t1_first_colony }
				max_steps = 3
				random_system_planet = {
					limit = {
						is_colonizable = yes
						is_colony = no
						has_planet_flag = prescripted_ideal
					}
					generate_very_early_primitives_on_planet = yes
					set_name = random
					change_colony_foundation_date = -461
					while = {
						count = 4
						create_army = {
							owner = last_created_country
							type = primitive_additional_army
							species = last_created_country
						}
					}
				}
			}
			reroll_random = yes
			closest_system = {
				limit = { has_star_flag = neighbor_t2_second_colony }
				max_steps = 6
				random_system_planet = {
					limit = {
						is_colonizable = yes
						is_colony = no
						has_planet_flag = prescripted_ideal
					}
					generate_very_early_primitives_on_planet = yes
					set_name = random
					change_colony_foundation_date = -1275
					while = {
						count = 4
						create_army = {
							owner = last_created_country
							type = primitive_additional_army
							species = last_created_country
						}
					}
				}
			}
		}
	}
}

#Reanimated Armies: Reanimating the enemy's army as your own
#An army has been killed in ground combat
# This = owner
# From = army
# FromFrom = opponent
# FromFromFrom = planet
country_event = {
	id = necroids.15
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = fromfrom
		fromfrom = {
			is_civic_reanimated_armies = yes
		}
		from = {
			exists = species
			species = {
				is_robotic = no
			}
		}
		NOT = { is_country_type = "gate_builders" }
	}

	immediate = {
		random_list = {
			2 = { }
			1 = {
				fromfromfrom = {
					create_army = {
						owner = root.fromfrom
						type = undead_army
						species = root.from.species
					}
				}
			}
		}
	}
}